

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";








ALTER SCHEMA "public" OWNER TO "postgres";


CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
BEGIN
  INSERT INTO public.user_profiles (
    user_id, 
    full_name,
    email,
    avatar_url,
    absence_number,
    class_name
  )
  VALUES (
    NEW.id, 
    NEW.raw_user_meta_data->>'name',
    NEW.email,
    NEW.raw_user_meta_data->>'avatar_url',
    NEW.raw_user_meta_data->>'absence_number',
    NEW.raw_user_meta_data->>'class_name'
  );
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_modified_column"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_modified_column"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_timestamp"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_timestamp"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_updated_at_column"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_updated_at_column"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."absences" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "date" "date" NOT NULL,
    "reason" "text",
    "photo_url" "text",
    "latitude" double precision,
    "longitude" double precision,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "status" "text"
);


ALTER TABLE "public"."absences" OWNER TO "postgres";


ALTER TABLE "public"."absences" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."absences_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."perizinan" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "kategori_izin" "text" NOT NULL,
    "deskripsi" "text" NOT NULL,
    "status" boolean DEFAULT false NOT NULL,
    "link_foto" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "approved_by" "uuid",
    "approved_at" timestamp with time zone,
    "rejection_reason" "text",
    "tanggal" "date" NOT NULL,
    "approval_status" "text" DEFAULT 'pending'::"text",
    "rejected_at" timestamp with time zone,
    "rejected_by" "text",
    CONSTRAINT "perizinan_kategori_izin_check" CHECK (("kategori_izin" = ANY (ARRAY['sakit'::"text", 'pergi'::"text"])))
);


ALTER TABLE "public"."perizinan" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_profiles" (
    "user_id" "uuid" NOT NULL,
    "full_name" "text",
    "email" "text" NOT NULL,
    "avatar_url" "text",
    "absence_number" character varying(10),
    "class_name" character varying(50),
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "role" "text"
);


ALTER TABLE "public"."user_profiles" OWNER TO "postgres";


ALTER TABLE ONLY "public"."absences"
    ADD CONSTRAINT "absences_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."perizinan"
    ADD CONSTRAINT "perizinan_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_profiles"
    ADD CONSTRAINT "user_profiles_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."user_profiles"
    ADD CONSTRAINT "user_profiles_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."user_profiles"
    ADD CONSTRAINT "user_profiles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_profiles"
    ADD CONSTRAINT "user_profiles_user_id_key" UNIQUE ("user_id");



CREATE INDEX "idx_perizinan_status" ON "public"."perizinan" USING "btree" ("status");



CREATE INDEX "idx_perizinan_user_date" ON "public"."perizinan" USING "btree" ("user_id", "tanggal");



CREATE INDEX "idx_perizinan_user_id" ON "public"."perizinan" USING "btree" ("user_id");



CREATE INDEX "idx_user_profiles_absence_number" ON "public"."user_profiles" USING "btree" ("absence_number");



CREATE INDEX "idx_user_profiles_class_name" ON "public"."user_profiles" USING "btree" ("class_name");



CREATE INDEX "idx_user_profiles_user_id" ON "public"."user_profiles" USING "btree" ("user_id");



CREATE OR REPLACE TRIGGER "trg_perizinan_update" BEFORE UPDATE ON "public"."perizinan" FOR EACH ROW EXECUTE FUNCTION "public"."update_timestamp"();



CREATE OR REPLACE TRIGGER "update_user_profiles_updated_at" BEFORE UPDATE ON "public"."user_profiles" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



ALTER TABLE ONLY "public"."absences"
    ADD CONSTRAINT "absences_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."perizinan"
    ADD CONSTRAINT "perizinan_approved_by_fkey" FOREIGN KEY ("approved_by") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."perizinan"
    ADD CONSTRAINT "perizinan_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user_profiles"("user_id");



ALTER TABLE ONLY "public"."user_profiles"
    ADD CONSTRAINT "user_profiles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE "public"."absences" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "absences_delete_policy" ON "public"."absences" FOR DELETE TO "authenticated" USING ((("user_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
   FROM "public"."user_profiles" "admin_check"
  WHERE (("admin_check"."user_id" = "auth"."uid"()) AND ("admin_check"."role" = 'admin'::"text"))))));



CREATE POLICY "absences_insert_policy" ON "public"."absences" FOR INSERT TO "authenticated" WITH CHECK (("user_id" = "auth"."uid"()));



CREATE POLICY "absences_select_policy" ON "public"."absences" FOR SELECT TO "authenticated" USING ((("user_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
   FROM "public"."user_profiles" "admin_check"
  WHERE (("admin_check"."user_id" = "auth"."uid"()) AND ("admin_check"."role" = 'admin'::"text"))))));



CREATE POLICY "absences_update_policy" ON "public"."absences" FOR UPDATE TO "authenticated" USING ((("user_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
   FROM "public"."user_profiles" "admin_check"
  WHERE (("admin_check"."user_id" = "auth"."uid"()) AND ("admin_check"."role" = 'admin'::"text"))))));



CREATE POLICY "allow_all_authenticated" ON "public"."user_profiles" TO "authenticated" USING (true) WITH CHECK (true);



ALTER TABLE "public"."perizinan" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "perizinan_delete_policy" ON "public"."perizinan" FOR DELETE TO "authenticated" USING ((("user_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
   FROM "public"."user_profiles" "admin_check"
  WHERE (("admin_check"."user_id" = "auth"."uid"()) AND ("admin_check"."role" = 'admin'::"text"))))));



CREATE POLICY "perizinan_insert_policy" ON "public"."perizinan" FOR INSERT TO "authenticated" WITH CHECK (("user_id" = "auth"."uid"()));



CREATE POLICY "perizinan_select_policy" ON "public"."perizinan" FOR SELECT TO "authenticated" USING ((("user_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
   FROM "public"."user_profiles" "admin_check"
  WHERE (("admin_check"."user_id" = "auth"."uid"()) AND ("admin_check"."role" = 'admin'::"text"))))));



CREATE POLICY "perizinan_update_policy" ON "public"."perizinan" FOR UPDATE TO "authenticated" USING ((("user_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
   FROM "public"."user_profiles" "admin_check"
  WHERE (("admin_check"."user_id" = "auth"."uid"()) AND ("admin_check"."role" = 'admin'::"text"))))));



ALTER TABLE "public"."user_profiles" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "user_profiles_delete_policy" ON "public"."user_profiles" FOR DELETE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."user_profiles" "admin_check"
  WHERE (("admin_check"."user_id" = "auth"."uid"()) AND ("admin_check"."role" = 'admin'::"text")))));



CREATE POLICY "user_profiles_insert_policy" ON "public"."user_profiles" FOR INSERT TO "authenticated" WITH CHECK (("user_id" = "auth"."uid"()));



CREATE POLICY "user_profiles_update_policy" ON "public"."user_profiles" FOR UPDATE TO "authenticated" USING ((("user_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
   FROM "public"."user_profiles" "admin_check"
  WHERE (("admin_check"."user_id" = "auth"."uid"()) AND ("admin_check"."role" = 'admin'::"text")))))) WITH CHECK ((("user_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
   FROM "public"."user_profiles" "admin_check"
  WHERE (("admin_check"."user_id" = "auth"."uid"()) AND ("admin_check"."role" = 'admin'::"text"))))));





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";






REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "authenticated";



































































































































































































GRANT SELECT,INSERT ON TABLE "public"."absences" TO "authenticated";



GRANT SELECT,INSERT,UPDATE ON TABLE "public"."perizinan" TO "authenticated";



GRANT SELECT,INSERT,UPDATE ON TABLE "public"."user_profiles" TO "authenticated";
GRANT SELECT ON TABLE "public"."user_profiles" TO "anon";



























RESET ALL;
